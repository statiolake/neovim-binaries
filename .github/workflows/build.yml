name: Build Neovim with old GLIBC

permissions:
  contents: write

on:
  schedule:
    # Check for new releases daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      version:
        description: "Neovim version to build (default: latest)"
        required: false
        default: "latest"

jobs:
  check-build:
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.check.outputs.should-build }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for new release
        id: check
        run: |
          # Use input version if provided, otherwise get latest
          if [ "${{ github.event.inputs.version }}" != "" ] && [ "${{ github.event.inputs.version }}" != "latest" ]; then
            TARGET_VERSION="${{ github.event.inputs.version }}"
            echo "Using input version: $TARGET_VERSION"
          else
            # Get latest Neovim version
            TARGET_VERSION=$(curl -s https://api.github.com/repos/neovim/neovim/releases/latest | grep '"tag_name"' | sed 's/.*"tag_name": "\([^"]*\)".*/\1/')
            echo "Latest version: $TARGET_VERSION"
          fi

          # Check if we already built this version
          if gh release view "$TARGET_VERSION" >/dev/null 2>&1; then
            echo "Version $TARGET_VERSION already exists, skipping build"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "Version $TARGET_VERSION found, will build"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

          echo "version=$TARGET_VERSION" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build:
    needs: check-build
    if: needs.check-build.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: ubuntu-24.04
          - arch: arm64
            runner: ubuntu-24.04-arm

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build for ${{ matrix.arch }}
        run: |
          VERSION=${{ needs.check-build.outputs.version }}

          # Build using native Docker (no cross-compilation needed)
          docker build --load -t neovim-builder .
          docker run --rm -v $(pwd):/output neovim-builder bash -c "
            cd /build &&
            /output/build.sh ${{ matrix.arch }} $VERSION &&
            cp nvim-linux-${{ matrix.arch }}.tar.gz /output/"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: nvim-linux-${{ matrix.arch }}
          path: nvim-linux-${{ matrix.arch }}.tar.gz

  release:
    needs: [check-build, build]
    if: needs.check-build.outputs.should-build == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create release
        run: |
          VERSION=${{ needs.check-build.outputs.version }}

          # Create release
          gh release create "$VERSION" \
            --title "Neovim $VERSION (Old GLIBC Compatible)" \
            --notes "Neovim $VERSION compiled with old GLIBC for compatibility with older Linux distributions.

          Built on Debian Jessie for maximum compatibility.

          ## Downloads
          - **nvim-linux-x86_64.tar.gz**: For x86_64 Linux systems
          - **nvim-linux-arm64.tar.gz**: For ARM64 Linux systems

          ## Installation
          1. Download the appropriate tarball for your architecture
          2. Extract: \`tar -xzf nvim-linux-\<arch\>.tar.gz\`
          3. Add to PATH or copy to /usr/local

          Built from: https://github.com/neovim/neovim/releases/tag/$VERSION" \
            nvim-linux-x86_64/nvim-linux-x86_64.tar.gz \
            nvim-linux-arm64/nvim-linux-arm64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
